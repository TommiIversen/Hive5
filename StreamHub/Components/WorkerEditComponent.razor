@using Common.DTOs
@using Common.DTOs.Commands
@using Common.DTOs.Events
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Models
@using StreamHub.Services
@inject WorkerService WorkerService
@inject BlazorSignalRService SignalRService

<div class="px-2 mb-2">
    <div class="px-4 py-2 bg-gray-800 flex space-x-4 rounded-lg">

        <!-- Left Side: Description, Name, and Button -->
        <div class="flex-2 space-y-4">
            <div>
                <label class="block text-gray-300">Worker Name</label>
                <input @bind="_workerName"
                       class="bg-gray-600 p-2 rounded text-white w-full"/>
            </div>
            <div>
                <label class="block text-gray-300">Worker Description</label>
                <input @bind="_workerDescription"
                       class="bg-gray-600 p-2 rounded text-white w-full"/>
            </div>
            <!-- Watchdog Section -->
            <div class="mt-4 text-gray-300 font-semibold">Watchdog</div>

            <!-- ImgWatchdogEnabled Switch -->
            <div class="flex items-center justify-between space-x-4">
                <label class="text-gray-300">Enabled</label>
                <label class="relative inline-flex items-center cursor-pointer">
                    <input type="checkbox" class="sr-only peer" @bind="_imgWatchdogEnabled"/>
                    <div class="w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-blue-600 
                                dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700
                                peer-checked:after:translate-x-full peer-checked:after:border-white 
                                after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white 
                                after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 
                                after:transition-all peer-checked:bg-blue-600"></div>
                </label>
            </div>

            <!-- ImgWatchdogInterval Input -->
            <div class="flex items-center justify-between space-x-4">
                <label class="text-gray-300">Interval (sec)</label>
                <input type="number" min="0" class="bg-gray-600 p-2 rounded text-white w-20 text-center"
                       @bind="_imgWatchdogIntervalSeconds"/>
            </div>

            <!-- ImgWatchdogGraceTime Input -->
            <div class="flex items-center justify-between space-x-4">
                <label class="text-gray-300">GraceTime (sec)</label>
                <input type="number" min="0" class="bg-gray-600 p-2 rounded text-white w-20 text-center"
                       @bind="_imgWatchdogGraceTimeSeconds"/>
            </div>

            <button @onclick="ApplyChangesAsync"
                    class="px-4 py-2 rounded w-full font-bold @GetButtonCss()"
                    disabled="@Worker.IsProcessing">
                Apply Changes
            </button>
        </div>

        <!-- Right Side: Worker Command -->
        <div class="flex-1">
            <label class="block text-gray-300">Worker Command</label>
            <textarea @bind="_workerCommand"
                      class="bg-gray-600 p-2 rounded text-white w-full"
                      style="min-height: 300px;"></textarea>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid EngineId { get; set; }
    [Parameter] public required WorkerViewModel Worker { get; init; }

    private string? _workerName;
    private string? _workerDescription;
    private string? _workerCommand;
    private bool _imgWatchdogEnabled;

    // Fields for seconds conversion
    private int _imgWatchdogGraceTimeSeconds;
    private int _imgWatchdogIntervalSeconds;

    protected override void OnInitialized()
    {
        // Initialiser lokale variabler med de eksisterende værdier fra Worker
        _workerName = Worker.BaseWorker.Name;
        _workerDescription = Worker.BaseWorker.Description;
        _workerCommand = Worker.BaseWorker.Command;

        // Initialize the TimeSpan fields as seconds for UI binding
        _imgWatchdogEnabled = Worker.BaseWorker.ImgWatchdogEnabled;
        _imgWatchdogGraceTimeSeconds = (int) Worker.BaseWorker.ImgWatchdogGraceTime.TotalSeconds;
        _imgWatchdogIntervalSeconds = (int) Worker.BaseWorker.ImgWatchdogInterval.TotalSeconds;

        var workerEventTopic = $"WorkerChangeEvent-{EngineId}-{Worker.WorkerId}";
        SignalRService.HubConnection.On<WorkerChangeEvent>(workerEventTopic, async _ => { await InvokeAsync(StateHasChanged); });
    }

    private string GetButtonCss()
    {
        return Worker.IsProcessing
            ? "bg-gray-400 text-gray-700 cursor-not-allowed"
            : "bg-blue-600 hover:bg-blue-700 text-white";
    }

    private async Task ApplyChangesAsync()
    {
        // Opret et WorkerCreateAndEdit objekt med de opdaterede værdier
        var editWorker = new WorkerCreateAndEdit
        {
            EngineId = EngineId,
            WorkerId = Worker.BaseWorker.WorkerId,
            Name = _workerName ?? string.Empty,
            Description = _workerDescription ?? string.Empty,
            IsEnabled = Worker.BaseWorker.IsEnabled,
            Command = _workerCommand ?? string.Empty,
            ImgWatchdogEnabled = _imgWatchdogEnabled,
            ImgWatchdogGraceTime = TimeSpan.FromSeconds(_imgWatchdogGraceTimeSeconds),
            ImgWatchdogInterval = TimeSpan.FromSeconds(_imgWatchdogIntervalSeconds)
        };

        // Kald EditWorkerAsync metoden for at gemme ændringerne
        var result = await WorkerService.EditWorkerAsync(editWorker);
    }

}
@using Common.Models
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Models
@using StreamHub.Services
@inject IJSRuntime JsRuntime
@inject BlazorSignalRService SignalRService
@implements IDisposable

<h3>Line Chart for Engine @Engine.BaseInfo.EngineName</h3>

<canvas id="@GetCanvasId()" width="400" height="200"></canvas>

@code {
    [Parameter] public EngineViewModel Engine { get; set; } // Modtag hele EngineViewModel som parameter

    private IJSObjectReference? _chart;

    private long[] _timePoints = new long[30];
    private double[] _cpuUsage = new double[30];
    private double[] _netRx = new double[30];
    private double[] _netTx = new double[30];
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Initializing Historic Line chart for engine {Engine.BaseInfo.EngineName}");
        SignalRService.HubConnection.On<Metric>("UpdateMetric", async (metric) =>
        {
            if (metric.EngineId == Engine.BaseInfo.EngineId)
            {
                    var metricData = new MetricSimpleViewModel(metric);
                    await UpdateChartData(metricData);
            }
        });
    }

    public void Dispose()
    {
        Console.WriteLine($"Disposing Historic Line chart for engine {Engine.BaseInfo.EngineName}");
        SignalRService.HubConnection.Remove("UpdateMetric");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine($"First render for engine {Engine.BaseInfo.EngineName}");

            // Initialiser grafen med data fra MetricsQueue
            var initialMetrics = Engine.MetricsQueue.ToList(); // Konverter til liste for at sikre korrekt rækkefølge

            var initialData = new
            {
                labels = initialMetrics.Select(m => m.Timestamp).ToArray(),
                cpuData = initialMetrics.Select(m => m.CPUUsage).ToArray(),
                rxData = initialMetrics.Select(m => m.RxUsagePercent).ToArray(),
                txData = initialMetrics.Select(m => m.TxUsagePercent).ToArray(),
                metricData = initialMetrics.ToArray() // Inkluder hele MetricData for tooltips
            };

            _chart = await JsRuntime.InvokeAsync<IJSObjectReference>("chartInterop.createLineChart", GetCanvasId(), initialData);
        }
    }
    
    private async Task UpdateChartData(MetricSimpleViewModel newMetricData)
    {
        if (_chart != null) // Sørg for, at grafen er initialiseret
        {
            var serializedData = System.Text.Json.JsonSerializer.Serialize(newMetricData);
            await JsRuntime.InvokeVoidAsync("chartInterop.updateLineChart", _chart, serializedData);
        }
    }
    
    private string GetCanvasId() => $"cpuChart-{Engine.BaseInfo.EngineId}";
}

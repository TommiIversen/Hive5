@page "/"
@using Common.Models
@using Engine.Utils
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Services
@inject EngineManager EngineManager
@inject WorkerService WorkerService
@inject BlazorSignalRService SignalRService
@if (!EngineManager.GetAllEngines().Any())
{
    <p>Ingen engines forbundet.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th class="col-4">Engine Info</th>
            <th class="col-8">Workers</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var engine in EngineManager.GetAllEngines())
        {
            // Hvis ConnectionId er null eller tom, så marker som offline (rød baggrund)
            var isOffline = string.IsNullOrEmpty(engine.ConnectionId);
            var rowStyle = isOffline ? "background-color: #445566;" : ""; // Rød baggrund hvis offline

            <!-- Remove Engine Button -->
            <button 
                @onclick="() => RemoveEngine(engine.BaseInfo.EngineId)" 
                class="px-4 py-2 rounded bg-orange-500 text-white hover:bg-orange-700">
                Remove Engine
            </button>


            <tr style="@rowStyle">
                <td class="col-4 align-top">

                    <div>
                        <div>BaseInfo</div>
                        <strong>@engine.ConnectionId</strong> <br/>
                        <strong>Engine Name:</strong> @engine.BaseInfo.EngineName <br/>
                        <strong>Engine Description</strong> @engine.BaseInfo.EngineDescription <br/>
                        <strong>Engine ID:</strong> @engine.BaseInfo.EngineId <br/>
                        <strong>Engine StartDate: </strong> @engine.BaseInfo.EngineStartDate <br/>
                        <MetricComponent Metric="engine.LastMetric"/>

                        <!-- Viser CPU-brug for hver kerne, hvis det er tilgængeligt -->
                        @if (engine.LastMetric?.PerCoreCpuUsage != null && engine.LastMetric.PerCoreCpuUsage.Count > 0)
                        {
                            <LineChartComponent Engine="@engine"/>
                            <strong>Per Core CPU Usage (%):</strong>
                            <CpuUsageBarChart EngineId="@engine.BaseInfo.EngineId.ToString()" LastMetric="@engine.LastMetric"/>
                        }
                        else
                        {
                            <strong>No data jet</strong>
                        }
                    </div>
                </td>
                <td class="col-8">
                    @if (engine.Workers.Any())
                    {
                        <table class="w-100">
                            @foreach (var worker in engine.Workers.Values)
                            {
                                <tr>
                                    <td class="col-4">

                                        <strong>Worker Name:</strong> @worker.Worker.Name <br/>
                                        <strong>Worker Description:</strong> @worker.Worker.Description <br/>
                                        <strong>Worker ID:</strong> @worker.WorkerId <br/>
                                        <strong>Worker IsRunning:</strong>@worker.Worker.State <br/>
                                        <div>
                                            <!-- Stop Worker Button -->
                                            <button
                                                @onclick="() => ToggleWorker(engine.BaseInfo.EngineId, worker.WorkerId, worker.Worker.State)"
                                                class="px-4 py-2 rounded 
                                                @(worker.IsProcessing ? "bg-gray-400 text-gray-700 cursor-not-allowed"
                                                : (worker.Worker.State == WorkerState.Running ? "bg-red-500 text-white hover:bg-red-700"
                                                : "bg-green-500 text-white hover:bg-green-700"))"
                                                disabled="@worker.IsProcessing">
                                                @(worker.Worker.State == WorkerState.Running ? "Stop" : "Start")
                                            </button>

                                            <!-- Remove Worker Button -->
                                            <button
                                                @onclick="() => RemoveWorker(engine.BaseInfo.EngineId, worker.WorkerId)"
                                                class="px-4 py-2 rounded 
                                                @(worker.IsProcessing ? "bg-gray-400 text-gray-700 cursor-not-allowed" : "bg-yellow-500 text-white hover:bg-yellow-700")"
                                                disabled="@worker.IsProcessing">
                                                Remove
                                            </button>

                                        </div>
                                        <!-- Show result of the operation -->
                                        @if (!string.IsNullOrEmpty(worker.OperationResult))
                                        {
                                            <div>@worker.OperationResult</div>
                                        }
                                    </td>

                                    <td class="col-4">
                                        <WorkerLog LogMessages="worker.LogMessages" WorkerId="@worker.WorkerId" EngineId="@engine.BaseInfo.EngineId.ToString()"/>
                                    </td>

                                    <td class="col-4">
                                        <ImageComponent WorkerId="@worker.WorkerId" InitialImageData="@worker.LastImage"/>
                                    </td>
                                </tr>
                            }
                        </table>
                    }
                    else
                    {
                        <p>Ingen workers.</p>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {



    protected override async Task OnInitializedAsync()
    {
        await SignalRService.StartConnectionAsync();

        // SignalRService.HubConnection.Reconnecting += _ =>
        // {
        //     _connectionStatus = "Genopretter forbindelse...";
        //     InvokeAsync(StateHasChanged);
        //     return Task.CompletedTask;
        // };
        //
        // SignalRService.HubConnection.Reconnected += _ =>
        // {
        //     _connectionStatus = "Forbundet";
        //     InvokeAsync(StateHasChanged);
        //     return Task.CompletedTask;
        // };
        //
        // SignalRService.HubConnection.Closed += _ =>
        // {
        //     _connectionStatus = "Ikke forbundet";
        //     InvokeAsync(StateHasChanged);
        //     return Task.CompletedTask;
        // };

        SignalRService.HubConnection.On<Metric>("UpdateMetric", async _ => { await InvokeAsync(StateHasChanged); });
        SignalRService.HubConnection.On("EngineChange", async () => { await InvokeAsync(StateHasChanged); });
        SignalRService.HubConnection.On<WorkerEvent>("WorkerEvent", async (workerEvent) =>
        {
            Console.WriteLine($"Razor got WorkerEvent: {workerEvent.EventType}");
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task RemoveEngine(Guid engineId)
    {
        var success = EngineManager.RemoveEngine(engineId);
        if (success)
        {
            Console.WriteLine($"Engine {engineId} removed successfully.");
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine($"Failed to remove engine {engineId}. Engine not found.");
        }
    }

    private async Task<string> StopWorker(Guid engineId, string workerId)
    {
        var result = await WorkerService.StopWorkerAsync(engineId, workerId);
        Console.WriteLine($"RESULT: {result.Message}");
        await InvokeAsync(StateHasChanged);
        return result.Message;
    }

    private async Task<string> StartWorker(Guid engineId, string workerId)
    {
        var result = await WorkerService.StartWorkerAsync(engineId, workerId);
        Console.WriteLine($"RESULT: {result.Message}");
        await InvokeAsync(StateHasChanged);
        return result.Message;
    }

    private async Task<string> RemoveWorker(Guid engineId, string workerId)
    {
        var result = await WorkerService.RemoveWorkerAsync(engineId, workerId);
        Console.WriteLine($"RESULT: {result.Message}");
        await InvokeAsync(StateHasChanged);
        return result.Message;
    }

    private async Task ToggleWorker(Guid engineId, string workerId, WorkerState state)
    {
        string resultMessage;

        if (state == WorkerState.Running)
        {
            resultMessage = await StopWorker(engineId, workerId);
        }
        else
        {
            resultMessage = await StartWorker(engineId, workerId);
        }

        Console.WriteLine($"Toggle Result: {resultMessage}");
        await InvokeAsync(StateHasChanged);
    }
    
}
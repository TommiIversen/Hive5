@page "/"
@using StreamHub.Models
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

<h3>StreamHub Dashboard</h3>

<p>Forbindelsesstatus: @connectionStatus</p>

@if (engines.Count == 0)
{
    <p>Ingen engines forbundet.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Engine ID</th>
                <th>CPU Usage (%)</th>
                <th>Memory Usage (MB)</th>
                <th>Workers</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var engine in engines.Values)
            {
                <tr>
                    <td>@engine.EngineId</td>
                    <td>@(engine.LastMetric?.CPUUsage.ToString("F2") ?? "N/A")</td>
                    <td>@(engine.LastMetric?.MemoryUsage.ToString("F2") ?? "N/A")</td>
                    <td>
                        @if (engine.Workers.Any())
                        {
                            <table>
                                @foreach (var worker in engine.Workers.Values)
                                {
                                    <tr>
                                        <td>@worker.WorkerId</td>
                                        <td>
                                            <button @onclick="() => StopWorker(engine.EngineId, worker.WorkerId)">Stop</button>
                                        </td>
                                        <td>@worker.LastLogMessage</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(worker.LastImage))
                                            {
                                                <img src="@worker.LastImage" alt="Worker Image" width="100" />
                                            }
                                        </td>
                                    </tr>
                                }
                            </table>
                        }
                        else
                        {
                            <p>Ingen workers.</p>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private HubConnection _hubConnection;
    private Dictionary<Guid, EngineViewModel> engines = new();
    private string connectionStatus = "Ikke forbundet";

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/streamhub"))
            .WithAutomaticReconnect()
            .Build();



        _hubConnection.Reconnecting += (error) =>
        {
            connectionStatus = "Genopretter forbindelse...";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        _hubConnection.Reconnected += (connectionId) =>
        {
            connectionStatus = "Forbundet";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        _hubConnection.Closed += (error) =>
        {
            connectionStatus = "Ikke forbundet";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        // Registrer handlers
        _hubConnection.On<Metric>("UpdateMetric", async (metric) =>
        {
            if (!engines.ContainsKey(metric.EngineId))
            {
                engines[metric.EngineId] = new EngineViewModel { EngineId = metric.EngineId };
            }
            engines[metric.EngineId].LastMetric = metric;
            await InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<LogEntry>("ReceiveLog", async (log) =>
        {
            if (!engines.ContainsKey(log.EngineId))
            {
                engines[log.EngineId] = new EngineViewModel { EngineId = log.EngineId };
            }
            var engine = engines[log.EngineId];
            if (!engine.Workers.ContainsKey(log.WorkerId))
            {
                engine.Workers[log.WorkerId] = new WorkerViewModel { WorkerId = log.WorkerId };
            }
            engine.Workers[log.WorkerId].LastLogMessage = log.Message;
            await InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<ImageData>("ReceiveImage", async (imageData) =>
        {
            if (!engines.ContainsKey(imageData.EngineId))
            {
                engines[imageData.EngineId] = new EngineViewModel { EngineId = imageData.EngineId };
            }
            var engine = engines[imageData.EngineId];
            if (!engine.Workers.ContainsKey(imageData.WorkerId))
            {
                engine.Workers[imageData.WorkerId] = new WorkerViewModel { WorkerId = imageData.WorkerId };
            }
            engine.Workers[imageData.WorkerId].LastImage = $"data:image/jpeg;base64,{Convert.ToBase64String(imageData.ImageBytes)}";
            await InvokeAsync(StateHasChanged);
        });

        // Start forbindelsen
        try
        {
            await _hubConnection.StartAsync();
            Console.WriteLine("SignalR connected.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
            connectionStatus = "Fejl ved oprettelse af forbindelse";
        }
    }

    private async Task StopWorker(Guid engineId, Guid workerId)
    {
        await _hubConnection.InvokeAsync("StopWorker", engineId, workerId);
    }
}

@page "/"
@using Common.Models
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Services
@inject NavigationManager NavigationManager
@inject EngineManager EngineManager
@inject WorkerService WorkerService
@inject TrackingCircuitHandler TrackingHandler
@inject BlazorSignalRService SignalRService


<h3>StreamHub Dashboard</h3>
<h3>Connected Users: @_connectedUsers</h3>

<p>Forbindelsesstatus: @_connectionStatus</p>

@if (!EngineManager.GetAllEngines().Any())
{
    <p>Ingen engines forbundet.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th class="col-4">Engine Info</th>
            <th class="col-8">Workers</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var engine in EngineManager.GetAllEngines())
        {
            // Hvis ConnectionId er null eller tom, så marker som offline (rød baggrund)
            var isOffline = string.IsNullOrEmpty(engine.ConnectionId);
            var rowStyle = isOffline ? "background-color: #445566;" : ""; // Rød baggrund hvis offline

            <button @onclick="() => RemoveEngine(engine.BaseInfo.EngineId)">
                Remove Engine
            </button>

            <tr style="@rowStyle">
                <td class="col-4">
                    <div>
                        <div>BaseInfo</div>
                        <strong>@engine.ConnectionId</strong> <br/>
                        <strong>Engine Name:</strong> @engine.BaseInfo.EngineName <br/>
                        <strong>Engine Description</strong> @engine.BaseInfo.EngineDescription <br/>
                        <strong>Engine ID:</strong> @engine.BaseInfo.EngineId <br/>
                        <strong>Engine StartDate: </strong> @engine.BaseInfo.EngineStartDate <br/>

                        <div>Metrics</div>
                        <strong>CPU Usage (%):</strong> @(engine.LastMetric?.CPUUsage.ToString("F2") ?? "N/A") <br/>
                        <strong>Memory Usage (MB):</strong> @(engine.LastMetric?.MemoryUsage.ToString("F2") ?? "N/A") <br/>
                        <strong>Current Process CPU Usage (%):</strong> @(engine.LastMetric?.CurrentProcessCpuUsage.ToString("F2") ?? "N/A") <br/>

                        <!-- RAM-information -->
                        <strong>Total Memory (MB):</strong> @(engine.LastMetric?.TotalMemory.ToString("F2") ?? "N/A") <br/>
                        <strong>Available Memory (MB):</strong> @(engine.LastMetric?.AvailableMemory.ToString("F2") ?? "N/A") <br/>
                        <strong>Used Memory (MB):</strong> @(engine.LastMetric != null ? (engine.LastMetric.TotalMemory - engine.LastMetric.AvailableMemory).ToString("F2") : "N/A") <br/>
                        <strong>Used Memory (%):</strong> @(engine.LastMetric != null ? ((engine.LastMetric.TotalMemory - engine.LastMetric.AvailableMemory) / engine.LastMetric.TotalMemory * 100).ToString("F2") : "N/A") <br/>
                        <strong>Current Process Memory Usage (MB):</strong> @(engine.LastMetric?.CurrentProcessMemoryUsage.ToString("F2") ?? "N/A") <br/>
                        
                        <strong>RxMbps:</strong> @(engine.LastMetric?.RxMbps.ToString("F2") ?? "N/A") <br/>
                        <strong>TxMbps:</strong> @(engine.LastMetric?.TxMbps.ToString("F2") ?? "N/A") <br/>
                        <strong>RxUsagePercentage:</strong> @(engine.LastMetric?.RxUsagePercent.ToString("F2") ?? "N/A") <br/>
                        <strong>TxUsagePercentage:</strong> @(engine.LastMetric?.TxUsagePercent.ToString("F2") ?? "N/A") <br/>
                        <strong>NetworkInterfaceName:</strong> @(engine.LastMetric?.NetworkInterfaceName ?? "N/A") <br/>
                        <strong>LinkSpeed (Gbps):</strong> @(engine.LastMetric?.LinkSpeedGbps.ToString("F2") ?? "N/A") <br/>

                            <!-- Viser CPU-brug for hver kerne, hvis det er tilgængeligt -->
                        @if (engine.LastMetric?.PerCoreCpuUsage != null && engine.LastMetric.PerCoreCpuUsage.Count > 0)
                        {
                            <LineChart Engine="@engine" />
                            <strong>Per Core CPU Usage (%):</strong>
                            <CpuUsageBarChart EngineId="@engine.BaseInfo.EngineId.ToString()" LastMetric="@engine.LastMetric"/>
                        }
                        else
                        {
                            <strong>No data jet</strong>
                        }
                    </div>
                </td>
                <td class="col-8">
                    @if (engine.Workers.Any())
                    {
                        <table class="w-100">
                            @foreach (var worker in engine.Workers.Values)
                            {
                                <tr>
                                    <td class="col-4">

                                        <strong>Worker Name:</strong> @worker.Worker.Name <br/>
                                        <strong>Worker Description:</strong> @worker.Worker.Description <br/>
                                        <strong>Worker ID:</strong> @worker.WorkerId <br/>
                                        <strong>Worker IsRunning:</strong>@worker.Worker.State <br/>
                                        <div>
                                            <button @onclick="() => StopWorker(engine.BaseInfo.EngineId, worker.WorkerId)"
                                                    disabled="@worker.IsProcessing">
                                                Stop
                                            </button>
                                            <button @onclick="() => StartWorker(engine.BaseInfo.EngineId, worker.WorkerId)"
                                                    disabled="@worker.IsProcessing">
                                                Start
                                            </button>
                                            <button @onclick="() => RemoveWorker(engine.BaseInfo.EngineId, worker.WorkerId)"
                                                    disabled="@worker.IsProcessing">
                                            Remove
                                            </button>
                                            
                                        </div>
                                        <!-- Show result of the operation -->
                                        @if (!string.IsNullOrEmpty(worker.OperationResult))
                                        {
                                            <div>@worker.OperationResult</div>
                                        }
                                    </td>

                                    <td class="col-4">
                                        <WorkerLog LogMessages="worker.LogMessages" WorkerId="@worker.WorkerId"/>
                                    </td>
                                    
                                    <td class="col-4">
                                        <ImageComponent WorkerId="@worker.WorkerId" InitialImageData="@worker.LastImage" />
                                    </td>
                                </tr>
                            }
                        </table>
                    }
                    else
                    {
                        <p>Ingen workers.</p>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private string _connectionStatus = "Ikke forbundet2";
    private int _connectedUsers;

    private void UpdateConnectedUsers(object? sender, UserCountChangedEventArgs e)
    {
        // Brug eventdata til at opdatere brugerantallet
        _connectedUsers = e.UserCount;
        InvokeAsync(StateHasChanged); // Opdater UI'et
    }

    public void Dispose()
    {
        TrackingHandler.OnUserCountChanged -= UpdateConnectedUsers;
    }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe til OnUserCountChanged eventet
        TrackingHandler.OnUserCountChanged += UpdateConnectedUsers;
        _connectedUsers = TrackingHandler.GetTotalConnectedUsers();
        _connectionStatus = "Forbundet";


        await SignalRService.StartConnectionAsync();

        SignalRService.HubConnection.Reconnecting += _ =>
        {
            _connectionStatus = "Genopretter forbindelse...";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        SignalRService.HubConnection.Reconnected += _ =>
        {
            _connectionStatus = "Forbundet";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        SignalRService.HubConnection.Closed += _ =>
        {
            _connectionStatus = "Ikke forbundet";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        SignalRService.HubConnection.On<Metric>("UpdateMetric", async _ => { await InvokeAsync(StateHasChanged); });
        SignalRService.HubConnection.On("EngineChange", async () => { await InvokeAsync(StateHasChanged); });
        SignalRService.HubConnection.On<WorkerEvent>("WorkerEvent", async (workerEvent) =>
        {
            Console.WriteLine($"Razor got WorkerEvent: {workerEvent.EventType}");
            await InvokeAsync(StateHasChanged);
        });
        
    }

    private async Task RemoveEngine(Guid engineId)
    {
        var success = EngineManager.RemoveEngine(engineId);
        if (success)
        {
            Console.WriteLine($"Engine {engineId} removed successfully.");
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine($"Failed to remove engine {engineId}. Engine not found.");
        }
    }

    private async Task<string> StopWorker(Guid engineId, string workerId)
    {
        var result = await WorkerService.StopWorkerAsync(engineId, workerId);
        Console.WriteLine($"RESULT: {result.Message}");
        await InvokeAsync(StateHasChanged);
        return result.Message;
    }

    private async Task<string> StartWorker(Guid engineId, string workerId)
    {
        var result = await WorkerService.StartWorkerAsync(engineId, workerId);
        Console.WriteLine($"RESULT: {result.Message}");
        await InvokeAsync(StateHasChanged);
        return result.Message;
    }
    
    private async Task<string> RemoveWorker(Guid engineId, string workerId)
    {
        var result = await WorkerService.RemoveWorkerAsync(engineId, workerId);
        Console.WriteLine($"RESULT: {result.Message}");
        await InvokeAsync(StateHasChanged);
        return result.Message;
    }
}
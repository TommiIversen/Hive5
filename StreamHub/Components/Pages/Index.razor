@page "/"
@using Common.Models
@using Engine.Commands
@using StreamHub.Models
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

<h3>StreamHub Dashboard</h3>

<p>Forbindelsesstatus: @_connectionStatus</p>

@if (engines.Count == 0)
{
    <p>Ingen engines forbundet.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Engine Info</th>
            <th>Workers</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var engine in engines.Values)
        {
            <tr>
                <td>
                    <div>
                        <strong>Engine ID:</strong> @engine.EngineId <br/>
                        <strong>CPU Usage (%):</strong> @(engine.LastMetric?.CPUUsage.ToString("F2") ?? "N/A") <br/>
                        <strong>Memory Usage (MB):</strong> @(engine.LastMetric?.MemoryUsage.ToString("F2") ?? "N/A") <br/>
                        <strong>Current Process CPU Usage (%):</strong> @(engine.LastMetric?.CurrentProcessCpuUsage.ToString("F2") ?? "N/A") <br/>

                        <!-- RAM-information -->
                        <strong>Total Memory (MB):</strong> @(engine.LastMetric?.TotalMemory.ToString("F2") ?? "N/A") <br/>
                        <strong>Available Memory (MB):</strong> @(engine.LastMetric?.AvailableMemory.ToString("F2") ?? "N/A") <br/>
                        <strong>Used Memory (MB):</strong> @(engine.LastMetric != null ? (engine.LastMetric.TotalMemory - engine.LastMetric.AvailableMemory).ToString("F2") : "N/A") <br/>
                        <strong>Used Memory (%):</strong> @(engine.LastMetric != null ? (((engine.LastMetric.TotalMemory - engine.LastMetric.AvailableMemory) / engine.LastMetric.TotalMemory) * 100).ToString("F2") : "N/A") <br/>
                        <strong>Current Process Memory Usage (MB):</strong> @(engine.LastMetric?.CurrentProcessMemoryUsage.ToString("F2") ?? "N/A") <br/>

                        <!-- Viser CPU-brug for hver kerne, hvis det er tilgængeligt -->
                        @if (engine.LastMetric?.PerCoreCpuUsage != null && engine.LastMetric.PerCoreCpuUsage.Count > 0)
                        {
                            <strong>Per Core CPU Usage (%):</strong>
                            <br/>
                            <ul>
                                @foreach (var usage in engine.LastMetric.PerCoreCpuUsage)
                                {
                                    <li>@usage.ToString("F2")%</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <strong>Per Core CPU Usage (%):</strong>
                        }
                    </div>
                </td>
                <td>
                    @if (engine.Workers.Any())
                    {
                        <table>
                            @foreach (var worker in engine.Workers.Values)
                            {
                                <tr>
                                    <td>
                                        <div>@worker.WorkerId</div>
                                        <div>
                                            <button @onclick="() => StopWorker(engine.EngineId, worker.WorkerId)"
                                                    disabled="@worker.IsProcessing">
                                                Stop
                                            </button>
                                        </div>
                                        <!-- Show result of the operation -->
                                        @if (!string.IsNullOrEmpty(worker.OperationResult))
                                        {
                                            <div>@worker.OperationResult</div>
                                        }
                                    </td>
                                    <td>
                                    </td>
                                    <td>
                                        @if (worker.LogMessages.Any())
                                        {
                                            <ul>
                                                @foreach (var logMessage in worker.LogMessages)
                                                {
                                                    <li>@logMessage</li>
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <p>Ingen logbeskeder.</p>
                                        }
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(worker.LastImage))
                                        {
                                            <img src="@worker.LastImage" alt="Worker Image" width="200"/>
                                        }
                                    </td>
                                </tr>
                            }
                        </table>
                    }
                    else
                    {
                        <p>Ingen workers.</p>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private HubConnection _hubConnection;
    private Dictionary<Guid, EngineViewModel> engines = new();
    private string _connectionStatus = "Ikke forbundet2";

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/streamhub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.Reconnecting += (error) =>
        {
            _connectionStatus = "Genopretter forbindelse...";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        _hubConnection.Reconnected += (connectionId) =>
        {
            _connectionStatus = "Forbundet";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        _hubConnection.Closed += (error) =>
        {
            _connectionStatus = "Ikke forbundet";
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        // Registrer handlers
        _hubConnection.On<Metric>("UpdateMetric", async (metric) =>
        {
            if (!engines.ContainsKey(metric.EngineId))
            {
                engines[metric.EngineId] = new EngineViewModel {EngineId = metric.EngineId};
            }

            engines[metric.EngineId].LastMetric = metric;
            await InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<LogEntry>("ReceiveLog", async (log) =>
        {
            if (!engines.ContainsKey(log.EngineId))
            {
                engines[log.EngineId] = new EngineViewModel {EngineId = log.EngineId};
            }

            var engine = engines[log.EngineId];
            if (!engine.Workers.ContainsKey(log.WorkerId))
            {
                engine.Workers[log.WorkerId] = new WorkerViewModel {WorkerId = log.WorkerId};
            }

            // Add the new log message
            engine.Workers[log.WorkerId].AddLogMessage(log.Message);
            await InvokeAsync(StateHasChanged);
        });


        _hubConnection.On<ImageData>("ReceiveImage", async (imageData) =>
        {
            if (!engines.ContainsKey(imageData.EngineId))
            {
                engines[imageData.EngineId] = new EngineViewModel {EngineId = imageData.EngineId};
            }

            var engine = engines[imageData.EngineId];
            if (!engine.Workers.ContainsKey(imageData.WorkerId))
            {
                engine.Workers[imageData.WorkerId] = new WorkerViewModel {WorkerId = imageData.WorkerId};
            }

            engine.Workers[imageData.WorkerId].LastImage = $"data:image/jpeg;base64,{Convert.ToBase64String(imageData.ImageBytes)}";
            await InvokeAsync(StateHasChanged);
        });

        // Start forbindelsen
        try
        {
            await _hubConnection.StartAsync();
            _connectionStatus = "Forbundet";
            Console.WriteLine("SignalR connected.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
            _connectionStatus = "Fejl ved oprettelse af forbindelse";
        }
    }

    private async Task StopWorker(Guid engineId, Guid workerId)
    {
        var worker = engines[engineId].Workers[workerId];
        worker.IsProcessing = true; // Lock the button while processing

        try
        {
            Console.WriteLine($"INVOKE: Stopping worker {workerId} on engine {engineId}");
            var result = await _hubConnection.InvokeAsync<CommandResult>("StopWorker", engineId, workerId).ConfigureAwait(true);
            Console.WriteLine($"RESULT: {result.Message}");
            // Show the result after receiving it
            worker.OperationResult = result.Message;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error stopping worker: {ex.Message}");
            worker.OperationResult = $"Failed to stop worker: {ex.Message}";
        }
        finally
        {
            worker.IsProcessing = false; // Unlock the button
            await InvokeAsync(StateHasChanged);
        }
    }

}
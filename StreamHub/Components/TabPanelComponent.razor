@using Common.Models
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Models
@using StreamHub.Services
@inject BlazorSignalRService SignalRService

<div class="mb-1">
    <div class="flex flex-row space-x-2 mr-2 mb-2">
        @foreach (var tabName in _tabs.Keys)
        {
            <button @onclick="() => ToggleTab(tabName)"
                    class="px-4 py-1 rounded text-white font-bold w-full flex items-center justify-between"
                    style="@GetTabButtonStyle(_tabs[tabName])">
                <span>@tabName</span>

                <svg class="h-6 w-6 @GetTabIconRotation(_tabs[tabName])" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"/>
                </svg>
            </button>
        }

        <button @onclick="CloseAllTabs" class="px-2 py-1 bg-gray-600 hover:bg-gray-700 rounded text-white font-bold">
            X
        </button>
    </div>

    @if (_tabs["Edit"])
    {
        <div class="px-2 mb-2">
            <WorkerEditComponent EngineId="@EngineId" Worker="Worker"/>
        </div>
    }

    @if (_tabs["Log"])
    {
        <div class="px-2 mb-2">
            <WorkerLog LogMessages="Worker.LogMessages" WorkerId="@Worker.WorkerId" EngineId="@EngineId.ToString()"/>
        </div>
    }

    @if (_tabs["Control"])
    {
        <div class="px-2 mb-2">
            <WorkerControlsComponent @key="@(EngineId + Worker.WorkerId)" EngineId="@EngineId" Worker="Worker"/>
        </div>
    }

    @if (_tabs["Restarter"])
    {
        <div class="px-2 mb-2">
            <FakeComponent2/>
        </div>
    }

</div>

@code {
    [Parameter] public Guid EngineId { get; set; }
    [Parameter] public required WorkerViewModel Worker { get; set; }

    private Dictionary<string, bool> _tabs = new()
    {
        {"Edit", false},
        {"Log", false},
        {"Control", false},
        {"Restarter", false}
    };

    private void ToggleTab(string tabName)
    {
        _tabs[tabName] = !_tabs[tabName];
    }

    private void CloseAllTabs()
    {
        foreach (var key in _tabs.Keys.ToList())
        {
            _tabs[key] = false;
        }
    }


    private string GetTabButtonStyle(bool isActive) =>
        isActive ? "background-color: #4A5568;" : "background-color: #2D3748;";

    private string GetTabIconRotation(bool isActive) =>
        isActive ? "transform rotate-180" : "";

}
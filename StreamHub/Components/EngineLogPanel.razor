@using System.Text
@using Common.DTOs
@using Common.DTOs.Events
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Models
@using StreamHub.Services
@inject BlazorSignalRService SignalRService
@inject IJSRuntime JsRuntime

<!-- Pause/Unpause Button -->

<ExpandablePanel Title="Engine Logs">
    <button
        @onclick="TogglePauseRendering"
        class="px-2 py-1 text-xs rounded 
        @(_pauseRendering ? "bg-red-500 text-white hover:bg-red-700" : "bg-green-500 text-white hover:bg-green-700")">
        @(_pauseRendering ? "Resume" : "Pause")
    </button>

    <!-- Download Logs Button -->
    <button
        @onclick="DownloadLogs"
        class="px-2 py-1 text-xs rounded bg-indigo-500 text-white hover:bg-indigo-700">
        Download
    </button>

    <!-- Clear Logs Button -->
    <button
        @onclick="Engine.ClearEngineLogs"
        class="px-2 py-1 text-xs rounded bg-red-500 text-white hover:bg-red-700">
        Clear
    </button>


    <!-- Log Entries -->
    @if (Engine.EngineLogMessages.Any())
    {
        <div style="height: 200px; overflow-y: auto; resize: vertical;" class="w-100">
            <Virtualize Items="Engine.EngineLogMessages.TakeLast(100).Reverse().ToList()" Context="logMessage" ItemSize="10">
                <div class="log-entry mb-2">
                    <div class="@GetLogLevelClass(logMessage.LogLevel)">
                        @logMessage.Timestamp : @logMessage.LogLevel
                    </div>
                    <!-- Display log message below -->
                    <div class="text-sm pl-4">
                        @logMessage.Message
                    </div>
                </div>
            </Virtualize>
        </div>
    }
    else
    {
        <p>Ingen logbeskeder.</p>
    }

</ExpandablePanel>

@code {
    [Parameter] public required EngineViewModel Engine { get; init; }

    private bool _isSubscribed = false;
    private bool _pauseRendering = false;
    private bool _forceRender = true;

    private int? _previousSequenceNumber = null;

    private bool IsOutOfSequence(EngineLogEntry engineLogMessage)
    {
        if (_previousSequenceNumber == null)
        {
            _previousSequenceNumber = engineLogMessage.LogSequenceNumber;
            return false;
        }

        if (engineLogMessage.LogSequenceNumber != _previousSequenceNumber - 1)
        {
            _previousSequenceNumber = engineLogMessage.LogSequenceNumber; // Opdater for næste tjek
            return true; // Ude af rækkefølge
        }

        _previousSequenceNumber = engineLogMessage.LogSequenceNumber; // Opdater for næste tjek
        return false; // Sekvensen er i orden
    }


    protected override async Task OnInitializedAsync()
    {
        await SubscribeToLogs();

        SignalRService.HubConnection.On<EngineLogEntry>("ReceiveEngineLog", async logLine => { await InvokeAsync(StateHasChanged); });
    }

    private string GetLogLevelClass(LogLevel logLevel)
    {
        return logLevel switch
        {
            LogLevel.Warning => "text-yellow-200",
            LogLevel.Error => "bg-red-900 text-red-200",
            LogLevel.Critical => "bg-red-900 text-red-200 font-bold",
            _ => "" // Standardfarve for Information eller lavere
        };
    }

    private async Task TogglePauseRendering()
    {
        _pauseRendering = !_pauseRendering;

        if (!_pauseRendering)
        {
            await SubscribeToLogs();
        }
        else
        {
            await UnsubscribeFromLogs();
        }

        _forceRender = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SubscribeToLogs()
    {
        if (!_isSubscribed)
        {
            await SignalRService.HubConnection.SendAsync("SubscribeToEngineLogs", Engine.BaseInfo.EngineId);
            _isSubscribed = true;
        }
    }

    private async Task UnsubscribeFromLogs()
    {
        if (_isSubscribed)
        {
            await SignalRService.HubConnection.SendAsync("UnsubscribeFromEngineLogs", Engine.BaseInfo.EngineId);
            _isSubscribed = false;
        }
    }

    protected override bool ShouldRender()
    {
        _previousSequenceNumber = null;
        if (_forceRender)
        {
            _forceRender = false;
            return true;
        }

        return !_pauseRendering;
    }

    private async void DownloadLogs()
    {
        var logContent = new StringBuilder();
        logContent.AppendLine($"EngineId: {Engine.BaseInfo.EngineId}");
        logContent.AppendLine("Timestamp,LogLevel,Message");

        foreach (var logEntry in Engine.EngineLogMessages)
        {
            logContent.AppendLine($"{logEntry.Timestamp},{logEntry.LogLevel},{logEntry.Message}");
        }

        var logFileName = $"logs_{Engine.BaseInfo.EngineId}_{DateTime.UtcNow:yyyyMMdd_HHmmss}.txt";
        await TriggerFileDownload(logFileName, logContent.ToString());
    }

    private async Task TriggerFileDownload(string fileName, string content)
    {
        var bytes = Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(bytes);
        var fileUrl = $"data:text/plain;base64,{base64}";
        await JsRuntime.InvokeVoidAsync("triggerFileDownload", fileName, fileUrl);
    }

}
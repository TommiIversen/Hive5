@using Common.DTOs.Enums
@using Common.DTOs.Queries
@using StreamHub.Models
@using StreamHub.Services
@inject IEngineManager EngineManager
@inject WorkerService WorkerService
@inject BlazorSignalRService SignalRService

<div class="mt-4 space-x-2">
    <button @onclick="() => ToggleStartStopWorker(EngineId, Worker.WorkerId, Worker.BaseWorker.State)"
            class="px-4 py-2 rounded @(GetButtonCss())"
            disabled="@Worker.IsProcessing">
        @(Worker.BaseWorker.State == WorkerState.Running ? "Stop" : "Start")
    </button>

    <button @onclick="() => RemoveWorker(EngineId, Worker.WorkerId)"
            class="px-4 py-2 rounded @(Worker.IsProcessing ? "bg-gray-400 text-gray-700 cursor-not-allowed" : "bg-yellow-500 text-white hover:bg-yellow-700")"
            disabled="@Worker.IsProcessing"
            data-testid="@($"remove-worker-{WorkerId}")">
        Remove
    </button>

    <button @onclick="() => ResetWatchdogCountAsync(EngineId, Worker.WorkerId)"
            class="px-4 py-2 rounded bg-blue-500 text-white hover:bg-blue-700"
            disabled="@Worker.IsProcessing">
        Reset Watchdog Count
    </button>

    <button @onclick="() => ToggleEnableDisableWorker(EngineId, Worker.WorkerId, Worker.BaseWorker.IsEnabled)"
            class="px-4 py-2 rounded @(Worker.IsProcessing ? "bg-gray-400 text-gray-700 cursor-not-allowed" : "bg-purple-500 text-white hover:bg-purple-700")"
            disabled="@Worker.IsProcessing">
        @(Worker.BaseWorker.IsEnabled ? "Disable" : "Enable")
    </button>

    <button @onclick="ShowLogsModal"
            class="px-4 py-2 rounded bg-indigo-500 text-white hover:bg-indigo-700">
        View Events & Logs
    </button>

    <button @onclick="ShowChangeLogsModal"
            class="px-4 py-2 rounded bg-green-500 text-white hover:bg-green-700">
        View Change Logs
    </button>

    @if (!string.IsNullOrEmpty(Worker.OperationResult))
    {
        <div class="mt-2 text-green-500">@Worker.OperationResult</div>
    }
</div>


@if (_isLogsModalVisible)
{
    <WorkerEventsLogsModal WorkerName="@Worker.BaseWorker.Name" WorkerEventsWithLogs="_workerEventsWithLogs"
                           OnClose="CloseLogsModal"/>
}

@if (_isChangeLogsModalVisible)
{
    <WorkerChangeLogsModal WorkerChangeLogs="_workerChangeLogs" OnClose="CloseChangeLogsModal"/>
}

@code {
    [Parameter] public Guid EngineId { get; set; }
    [Parameter] public required string WorkerId { get; init; }
    [Parameter] public required WorkerViewModel Worker { get; init; }

    private bool _isLogsModalVisible;
    private WorkerEventLogCollection? _workerEventsWithLogs;

    private bool _isChangeLogsModalVisible;
    private WorkerChangeLog? _workerChangeLogs;

    private async Task ShowLogsModal()
    {
        var result = await WorkerService.GetWorkerEventsWithLogsAsync(EngineId, Worker.WorkerId);
        if (result is { Success: true })
        {
            _workerEventsWithLogs = result.Data;
            _isLogsModalVisible = true;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Console.WriteLine($"Failed to fetch events and logs: {result.Data}");
            Console.WriteLine($"Failed to fetch events and logs: {result.Message}");
        }
    }

    private void CloseLogsModal()
    {
        _isLogsModalVisible = false;
    }

    private async Task ShowChangeLogsModal()
    {
        var result = await WorkerService.GetWorkerChangeLogsAsync(EngineId, Worker.WorkerId);
        if (result.Success)
        {
            _workerChangeLogs = result.Data;
        }
        else
        {
            _workerChangeLogs = new WorkerChangeLog
            {
                WorkerId = Worker.WorkerId,
                Changes =
                [
                    new WorkerChangeLogEntry
                    {
                        ChangeTimestamp = DateTime.UtcNow,
                        ChangeDescription = "No change logs found for this worker.",
                        ChangeDetails = ""
                    }
                ]
            };
        }

        _isChangeLogsModalVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private void CloseChangeLogsModal()
    {
        _isChangeLogsModalVisible = false;
    }

    private string GetButtonCss()
    {
        return Worker.IsProcessing ? "bg-gray-400 text-gray-700 cursor-not-allowed"
            : Worker.BaseWorker.State == WorkerState.Running ? "bg-red-500 text-white hover:bg-red-700"
            : "bg-green-500 text-white hover:bg-green-700";
    }

    private async Task ToggleStartStopWorker(Guid engineId, string workerId, WorkerState state)
    {
        var resultMessage = state == WorkerState.Running
            ? await WorkerService.StopWorkerAsync(engineId, workerId)
            : await WorkerService.StartWorkerAsync(engineId, workerId);

        Console.WriteLine($"Toggle Result: {resultMessage.Message}");
        await InvokeAsync(StateHasChanged);
    }

    private async Task RemoveWorker(Guid engineId, string workerId)
    {
        var resultMessage = await WorkerService.RemoveWorkerAsync(engineId, workerId);
        Console.WriteLine($"Remove Result: {resultMessage.Message}");
        await InvokeAsync(StateHasChanged);
    }

    private async Task ResetWatchdogCountAsync(Guid engineId, string workerId)
    {
        var resultMessage = await WorkerService.ResetWatchdogEventCountAsync(engineId, workerId);
        Console.WriteLine($"Reset Watchdog Count Result: {resultMessage.Message}");
        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleEnableDisableWorker(Guid engineId, string workerId, bool isEnabled)
    {
        var resultMessage = await WorkerService.EnableDisableWorkerAsync(engineId, workerId, !isEnabled);
        Console.WriteLine($"Enable/Disable Result: {resultMessage.Message}");
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Console.WriteLine("Disposing WorkerControlsComponent");
        SignalRService.HubConnection.Remove("WorkerChangeEvent");
    }

}
@using Common.DTOs
@using Common.DTOs.Commands
@using StreamHub.Services
@inject WorkerService WorkerService
@inject BlazorSignalRService SignalRService


<EngineExpandablePanel Title="Add Worker">
    <div class="bg-gray-700 p-4 mt-4 rounded-lg">
        <h3 class="text-xl text-white font-semibold">Opret ny worker</h3>
        <div data-testid="create-worker-form" class="mt-4">
            <label class="block text-gray-400">Worker ID:</label>
            <input type="text" @bind="_newWorkerId" @oninput="ValidateWorkerId" class="w-full p-2 mt-1 rounded-lg bg-gray-900 text-white" data-testid="worker-id-input"/>

            @if (!string.IsNullOrEmpty(_workerIdError))
            {
                <span class="text-red-500 text-sm">@_workerIdError</span>
            }

            <label class="block text-gray-400 mt-4">Name:</label>
            <input type="text" @bind="_newWorkerName" class="w-full p-2 mt-1 rounded-lg bg-gray-900 text-white" data-testid="worker-name-input"/>

            <label class="block text-gray-400 mt-4">Description:</label>
            <input type="text" @bind="_newWorkerDescription" class="w-full p-2 mt-1 rounded-lg bg-gray-900 text-white" data-testid="worker-description-input"/>

            <label class="block text-gray-400 mt-4">Command:</label>
            <textarea @bind="_newWorkerCommand" class="w-full p-2 mt-1 rounded-lg bg-gray-900 text-white" data-testid="worker-command-input"></textarea>

            <label class="block text-gray-400 mt-4">Streamer Type:</label>
            <select @bind="_selectedStreamerType" class="w-full p-2 mt-1 rounded-lg bg-gray-900 text-white" data-testid="streamer-type-select">
                <option value="">Select Streamer</option>
                @foreach (var streamer in EnginInfo.Streamers)
                {
                    <option value="@streamer">@streamer</option>
                }
            </select>
            @if (!string.IsNullOrEmpty(_streamerTypeError))
            {
                <span class="text-red-500 text-sm">@_streamerTypeError</span>
            }

            <button @onclick="CreateNewWorker" class="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded" data-testid="create-worker-button">
                Add Worker
            </button>
        </div>

        @if (!string.IsNullOrEmpty(_commandResultMessage))
        {
            <div class="mt-4 p-2 bg-gray-800 text-white rounded" data-testid="command-result-message">
                @_commandResultMessage
            </div>
        }
    </div>
</EngineExpandablePanel>

@code {
    [Parameter] public required BaseEngineInfo EnginInfo { get; set; }

    private string _newWorkerId = string.Empty;
    private string _newWorkerName = string.Empty;
    private string _newWorkerDescription = string.Empty;
    private string _newWorkerCommand = string.Empty;
    private string _commandResultMessage = string.Empty;
    private string _workerIdError = string.Empty;
    private string _selectedStreamerType = string.Empty;
    private string _streamerTypeError = string.Empty;

    private void ValidateWorkerId(ChangeEventArgs e)
    {
        _newWorkerId = e.Value?.ToString() ?? string.Empty;

        // Check if WorkerId is empty or has at least 4 characters
        if (!string.IsNullOrEmpty(_newWorkerId) && _newWorkerId.Length < 4)
        {
            _workerIdError = "Worker ID skal være mindst 4 tegn, hvis det udfyldes.";
        }
        else
        {
            _workerIdError = string.Empty;
        }
    }

    private async Task CreateNewWorker()
    {
        if (string.IsNullOrEmpty(_selectedStreamerType))
        {
            _streamerTypeError = "Please select a streamer type.";
            return;
        }

        var workerCreate = new WorkerCreateAndEdit
        {
            EngineId = EnginInfo.EngineId,
            WorkerId = _newWorkerId,
            Name = _newWorkerName,
            IsEnabled = true,
            Description = _newWorkerDescription,
            Command = _newWorkerCommand,
            ImgWatchdogEnabled = true,
            ImgWatchdogGraceTime = TimeSpan.FromSeconds(10),
            ImgWatchdogInterval = TimeSpan.FromSeconds(2),
            StreamerType = _selectedStreamerType
        };
        var commandResult = await WorkerService.CreateWorkerAsync(workerCreate);

        // reset form if success 
        if (commandResult.Success)
        {
            _newWorkerId = string.Empty;
            _newWorkerName = string.Empty;
            _newWorkerDescription = string.Empty;
            _newWorkerCommand = string.Empty;
        }

        _commandResultMessage = commandResult.Message;
    }

}
@inject IJSRuntime JsRuntime
@inject BlazorSignalRService SignalRService
@using System.Text.Json
@using Common.DTOs
@using Common.DTOs.Events
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Models
@using StreamHub.Services
@implements IDisposable


<canvas id="@GetCanvasId()" width="400" height="200"></canvas>


@code {
    [Parameter] public required EngineViewModel Engine { get; set; } // Modtag hele EngineViewModel som parameter

    private IJSObjectReference? _chart;
    private long[] _timePoints = new long[30];
    private double[] _cpuUsage = new double[30];
    private double[] _netRx = new double[30];
    private double[] _netTx = new double[30];

    protected override Task OnInitializedAsync()
    {
        SignalRService.HubConnection.On<EngineMetric>($"UpdateMetric-{Engine.Info.EngineId}", async metric =>
        {
            if (metric.EngineId == Engine.Info.EngineId)
            {
                var metricData = new MetricSimpleViewModel(metric);
                await UpdateChartData(metricData);
            }
        });
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        Console.WriteLine($"Disposing Historic Line chart for engine {Engine.Info.EngineId}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine($"First LineGraph render for engine {Engine.Info.EngineName}");
            var initialMetrics = Engine.MetricsQueue.ToList(); // Konverter til liste for at sikre korrekt rækkefølge

            var initialData = new
            {
                labels = initialMetrics.Select(m => m.Timestamp).ToArray(),
                cpuData = initialMetrics.Select(m => m.CPUUsage).ToArray(),
                rxData = initialMetrics.Select(m => m.RxUsagePercent).ToArray(),
                txData = initialMetrics.Select(m => m.TxUsagePercent).ToArray(),
                metricData = initialMetrics.ToArray() // Inkluder hele MetricData for tooltips
            };
            _chart = await JsRuntime.InvokeAsync<IJSObjectReference>("chartInterop.createLineChart", GetCanvasId(), initialData);
        }
    }

    private async Task UpdateChartData(MetricSimpleViewModel newMetricData)
    {
        if (_chart != null)
        {
            var serializedData = JsonSerializer.Serialize(newMetricData);
            await JsRuntime.InvokeVoidAsync("chartInterop.updateLineChart", _chart, serializedData);
        }
    }

    private string GetCanvasId()
    {
        return $"cpuChart-{Engine.Info.EngineId}";
    }

}
@using Common.DTOs.Events
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Services
@inject BlazorSignalRService SignalRService

<EngineExpandablePanel Title="Metrics">
    @if (Metric != null)
    {
        <ul class="p-2 space-y1 rounded-lg">
            <li class="flex justify-between">
                <span class="font-semibold">CPU Usage (%):</span>
                <span>@Metric.CpuUsage.ToString("F2")</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Memory Usage (GB):</span>
                <span>@((Metric.MemoryUsage / 1024).ToString("F2"))</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Current Process CPU Usage (%):</span>
                <span>@Metric.CurrentProcessCpuUsage.ToString("F2")</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Total Memory (GB):</span>
                <span>@((Metric.TotalMemory / 1024).ToString("F2"))</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Available Memory (GB):</span>
                <span>@((Metric.AvailableMemory / 1024).ToString("F2"))</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Used Memory (GB):</span>
                <span>@(((Metric.TotalMemory - Metric.AvailableMemory) / 1024).ToString("F2"))</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Used Memory (%):</span>
                <span>@((int) ((Metric.TotalMemory - Metric.AvailableMemory) / Metric.TotalMemory * 100))</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Current Process Memory Usage (MB):</span>
                <span>@Metric.CurrentProcessMemoryUsage.ToString("F2")</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Rx Mbps:</span>
                <span>@Metric.RxMbps.ToString("F2")</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Tx Mbps:</span>
                <span>@Metric.TxMbps.ToString("F2")</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Rx Usage (%):</span>
                <span>@Metric.RxUsagePercent.ToString("F2")</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Tx Usage (%):</span>
                <span>@Metric.TxUsagePercent.ToString("F2")</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Network Interface Name:</span>
                <span>@TruncateText(Metric.NetworkInterfaceName, 25)</span>
            </li>
            <li class="flex justify-between">
                <span class="font-semibold">Link Speed (Gbps):</span>
                <span>@Metric.LinkSpeedGbps.ToString("F2")</span>
            </li>
        </ul>
    }
</EngineExpandablePanel>

@code {
    private EngineMetric? Metric { get; set; }
    [Parameter] public required Guid EngineId { get; init; }

    protected override Task OnInitializedAsync()
    {
        SignalRService.HubConnection.On<EngineMetric>($"UpdateMetric-{EngineId}", async metric =>
        {
            if (metric.EngineId == EngineId)
            {
                Metric = metric;
                await InvokeAsync(StateHasChanged);
            }
        });
        return Task.CompletedTask;
    }

    private string TruncateText(string text, int maxLength)
    {
        if (text.Length <= maxLength)
        {
            return text;
        }

        return text[..maxLength] + "...";
    }

}
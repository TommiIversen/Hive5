@inject IJSRuntime JsRuntime
@inject BlazorSignalRService SignalRService
@using Common.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Services
@implements IDisposable

<canvas id="@GetCanvasId()" width="400" height="150"></canvas>

@code {
    [Parameter] public Guid EngineId { get; set; }

    private IJSObjectReference? _chart;
    private readonly List<string> _coreNames = new();

    protected override Task OnInitializedAsync()
    {
        SignalRService.HubConnection.On<Metric>($"UpdateMetric-{EngineId}", async metric =>
        {
            await UpdateChart(metric.PerCoreCpuUsage);

            // Hvis det er første gang, der modtages data, opret labels for CPU-kerner
            if (_coreNames.Count == 0 && metric.PerCoreCpuUsage.Count > 0)
            {
                for (var i = 0; i < metric.PerCoreCpuUsage.Count; i++)
                {
                    _coreNames.Add($"C-{i}");
                }

                // Opret grafen med de første modtagne data
                _chart = await JsRuntime.InvokeAsync<IJSObjectReference>("barChartInterop.createBarChart", GetCanvasId(), _coreNames, metric.PerCoreCpuUsage);
            }
        });
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        Console.WriteLine($"Disposing Bar CPU chart for engine {EngineId}");
    }

    private async Task UpdateChart(List<double> updatedCoreUsage)
    {
        if (_chart != null)
        {
            await JsRuntime.InvokeVoidAsync("barChartInterop.updateBarChart", _chart, updatedCoreUsage);
        }
    }

    private string GetCanvasId()
    {
        return $"cpuBarChart-{EngineId}";
    }

}
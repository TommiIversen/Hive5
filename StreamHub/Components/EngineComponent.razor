@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Models
@using StreamHub.Services
@inject IEngineManager EngineManager
@inject WorkerService WorkerService
@inject BlazorSignalRService SignalRService
@inject IJSRuntime JSRuntime

<div class="bg-gray-800 border border-gray-700 p-4 rounded-lg mb-4 grid grid-cols-1 md:grid-cols-4 gap-4 relative">
    @if (string.IsNullOrEmpty(Engine?.ConnectionInfo.ConnectionId))
    {
        <div class="absolute inset-0 bg-black bg-opacity-50 flex flex-col rounded-lg justify-center items-center text-white px-4 py-2" style="backdrop-filter: blur(5px); z-index: 10;">
            <span class="text-2xl font-bold">OFFLINE</span>
            <span>@Engine?.Info.EngineName</span>
            <button @onclick="() => RemoveEngine(Engine.Info.EngineId)" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded">Remove Engine</button>
        </div>
    }

    <div class="bg-slate-950 p-4 border border-slate-700 shadow-sm rounded-lg md:col-span-1">
        <h2 class="text-xl font-semibold">@Engine?.Info.EngineName</h2>
        <div class="text-gray-400">@Engine?.Info.EngineDescription</div>
        <EngineConnectionInfoComponent Engine="@Engine"/>
        <EngineMetricExpandPanelComponent EngineId="@Engine.Info.EngineId"/>
        <EngineLogPanel Engine="@Engine"></EngineLogPanel>
        <EngineCreateWorker EnginInfo="@Engine.Info"/>
        <EngineMetricLineChartComponent Engine="@Engine"/>
        <EngineMetricCpuUsageBarChart EngineId="@Engine.Info.EngineId"/>
    </div>

    <div class="md:col-span-3">
        @if (Engine.Workers?.Any() == true)
        {
            <div class="grid grid-cols-1">
                @foreach (var worker in Engine.GetOrderedWorkers())
                {
                    <div draggable="true"
                         @ondragstart="() => OnDragStart(worker.WorkerId)"
                         @ondragover="e => HandleDragOver(worker.WorkerId)"
                         @ondragover:preventDefault="true"
                         @ondrop="() => OnDrop(worker.WorkerId)"
                         class="cursor-move">

                        @if (_dragTargetWorkerId == worker.WorkerId)
                        {
                            <div class="worker-card bg-slate-600 bg-[repeating-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 0, rgba(255, 255, 255, 0.1) 5px, transparent 5px, transparent 10px)] opacity-50 transition-transform duration-400 rounded-lg shadow-lg mb-3 h-24 flex items-center justify-center">
                                <span class="text-white font-semibold text-xl opacity-80">Insert here</span>
                            </div>
                        }

                        <WorkerComponent @key="@($"WorkerComponent-{Engine.Info.EngineId}-{worker.WorkerId}")" EnginInfo="Engine.Info" Worker="worker"/>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Ingen workers forbundet.</p>
        }
    </div>
</div>

@code {
    [Parameter] public required EngineViewModel Engine { get; set; }


    private string? _draggedWorkerId;
    private string? _dragTargetWorkerId;

    private async Task RemoveEngine(Guid engineId)
    {
        await SignalRService.HubConnection.SendAsync("RemoveEngine", engineId);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("enableAutoScroll");
        }
    }

    private void OnDragStart(string workerId)
    {
        Console.WriteLine($"OnDragStart: {workerId}");
        _draggedWorkerId = workerId;
    }

    private void HandleDragOver(string targetWorkerId)
    {
        // Kun opdater hvis der er en gyldig draggedWorkerId
        if (_draggedWorkerId != null)
        {
            _dragTargetWorkerId = targetWorkerId;
        }
    }

    private async Task OnDrop(string targetWorkerId)
    {
        Console.WriteLine($"OnDrop: {targetWorkerId}");
        if (_draggedWorkerId == null || _draggedWorkerId == targetWorkerId)
            return;

        Console.WriteLine($"Reordering workers: {_draggedWorkerId} -> {targetWorkerId}");
        Engine.ReorderWorkers(_draggedWorkerId, targetWorkerId);

        // Nulstil markør og opdater visning
        _draggedWorkerId = null;
        _dragTargetWorkerId = null;

        await InvokeAsync(StateHasChanged); // Opdater UI straks
    }

}
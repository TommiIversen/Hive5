@inject BlazorSignalRService SignalRService
@inject IJSRuntime JsRuntime
@using System.Text
@using Common.DTOs.Events
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Models
@using StreamHub.Services
@implements IAsyncDisposable


<!-- Pause/Unpause Button -->
<button
    @onclick="TogglePauseRendering"
    class="px-2 py-1 text-xs rounded 
        @(_pauseRendering ? "bg-red-500 text-white hover:bg-red-700" : "bg-green-500 text-white hover:bg-green-700")">
    @(_pauseRendering ? "Resume" : "Pause")
</button>

<!-- Download Logs Button -->
<button
    @onclick="DownloadLogs"
    class="px-2 py-1 text-xs rounded bg-indigo-500 text-white hover:bg-indigo-700">
    Download
</button>

<!-- Clear Logs Button -->
<button
    @onclick="Worker.ClearWorkerLogs"
    class="px-2 py-1 text-xs rounded bg-red-500 text-white hover:bg-red-700">
    Clear
</button>

<div style="height: 200px; overflow-y: auto; resize: vertical;" class="w-100">

    @if (Worker.LogMessages.Any())
    {
        <Virtualize Items="Worker.LogMessages.TakeLast(100).Reverse().ToList()" Context="logMessage" ItemSize="10">
            <div class="log-entry">
                <div class="@GetLogLevelClass(logMessage.LogLevel)">
                    @if (IsOutOfSequence(logMessage))
                    {
                        <span class="text-warning">&#9888;</span>
                    }
                    @logMessage.LogSequenceNumber: @logMessage.LogTimestamp : @logMessage.LogLevel : @logMessage.Message
                </div>
            </div>
        </Virtualize>
    }
    else
    {
        <p>Ingen logbeskeder.</p>
    }
</div>


@code {
    [Parameter] public required Guid EngineId { get; init; }
    [Parameter] public required WorkerViewModel Worker { get; init; }

    private bool _isSubscribed = false;
    private bool _pauseRendering = false;
    private bool _forceRender = true;

    private int? _previousSequenceNumber = null;

    private bool IsOutOfSequence(WorkerLogEntry workerLogMessage)
    {
        if (_previousSequenceNumber == null)
        {
            _previousSequenceNumber = workerLogMessage.LogSequenceNumber;
            return false;
        }

        if (workerLogMessage.LogSequenceNumber != _previousSequenceNumber - 1)
        {
            _previousSequenceNumber = workerLogMessage.LogSequenceNumber; // Opdater for næste tjek
            return true; // Ude af rækkefølge
        }

        _previousSequenceNumber = workerLogMessage.LogSequenceNumber; // Opdater for næste tjek
        return false; // Sekvensen er i orden
    }


    protected override async Task OnInitializedAsync()
    {
        await SubscribeToLogs();
        SignalRService.HubConnection.On<WorkerLogEntry>($"ReceiveWorkerLog-{EngineId}-{Worker.WorkerId}", async _ =>
        {
            Console.WriteLine($"Received log message for WorkerId: {Worker.WorkerId}");
            await InvokeAsync(StateHasChanged);
        });
    }


    private string GetLogLevelClass(LogLevel logLevel)
    {
        return logLevel switch
        {
            LogLevel.Warning => "bg-yellow-900 text-yellow-200",
            LogLevel.Error => "bg-red-900 text-red-200",
            LogLevel.Critical => "bg-red-900 text-red-200 font-bold",
            _ => "" // Standardfarve for Information eller lavere
        };
    }

    private async Task TogglePauseRendering()
    {
        _pauseRendering = !_pauseRendering;

        if (!_pauseRendering)
        {
            await SubscribeToLogs();
        }
        else
        {
            await UnsubscribeFromLogs();
        }

        _forceRender = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SubscribeToLogs()
    {
        if (!_isSubscribed)
        {
            await SignalRService.HubConnection.SendAsync("SubscribeToWorkerLogs", Worker.WorkerId, EngineId);
            _isSubscribed = true;
        }
    }

    private async Task UnsubscribeFromLogs()
    {
        if (_isSubscribed)
        {
            await SignalRService.HubConnection.SendAsync("UnsubscribeFromWorkerLogs", Worker.WorkerId, EngineId);
            _isSubscribed = false;
        }
    }

    protected override bool ShouldRender()
    {
        _previousSequenceNumber = null;
        if (_forceRender)
        {
            _forceRender = false;
            return true;
        }

        return !_pauseRendering;
    }

    private async void DownloadLogs()
    {
        var logContent = new StringBuilder();
        logContent.AppendLine($"EngineId: {EngineId}, WorkerId: {Worker.WorkerId}");
        logContent.AppendLine("Timestamp,LogLevel,Message");

        foreach (var logEntry in Worker.LogMessages)
        {
            logContent.AppendLine($"{logEntry.Timestamp},{logEntry.LogLevel},{logEntry.Message}");
        }

        var logFileName = $"logs_{Worker.WorkerId}_{DateTime.UtcNow:yyyyMMdd_HHmmss}.txt";
        await TriggerFileDownload(logFileName, logContent.ToString());
    }

    private async Task TriggerFileDownload(string fileName, string content)
    {
        var bytes = Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(bytes);
        var fileUrl = $"data:text/plain;base64,{base64}";
        await JsRuntime.InvokeVoidAsync("triggerFileDownload", fileName, fileUrl);
    }

    public async ValueTask DisposeAsync()
    {
        if (_isSubscribed)
        {
            await UnsubscribeFromLogs();
            SignalRService.HubConnection.Remove($"ReceiveWorkerLog-{EngineId}-{Worker.WorkerId}");
            Console.WriteLine("Unsubscribed from logs during component disposal.");
        }
    }

}
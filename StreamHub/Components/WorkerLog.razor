@using System.Collections.Concurrent
@using Common.Models
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Services
@inject BlazorSignalRService SignalRService

<!-- Subscription/Unsubscription Button -->
<button @onclick="ToggleSubscription">
    @(IsSubscribed ? "Unsubscribe" : "Subscribe")
</button>

@if (LogMessages.Any())
{
    <ul>
        @foreach (var logMessage in LogMessages)
        {
            <li>@logMessage.Message</li>
        }
    </ul>
}
else
{
    <p>Ingen logbeskeder.</p>
}

@code {
    [Parameter]
    public ConcurrentQueue<LogEntry> LogMessages { get; set; } = new();
    [Parameter]
    public string Workerid { get; set; } = "";


    private bool IsSubscribed = false;

    // Toggle Subscription Logic
    private async Task ToggleSubscription()
    {
        if (IsSubscribed)
        {
            // Unsubscribe from receiving logs
            await UnsubscribeFromLogs();
        }
        else
        {
            // Subscribe to receiving logs
            await SubscribeToLogs();
        }

        IsSubscribed = !IsSubscribed; // Toggle the subscription state
    }

    private async Task SubscribeToLogs()
    {
        if (SignalRService.HubConnection != null)
        {
            // Eventuelt logik for at tilmelde sig en specifik gruppe/worker
            await SignalRService.HubConnection.SendAsync("SubscribeToLogs", Workerid); // Tilpasset efter behov
        }
    }

    private async Task UnsubscribeFromLogs()
    {
        if (SignalRService.HubConnection != null)
        {
            // Eventuelt logik for at afmelde sig en specifik gruppe/worker
            await SignalRService.HubConnection.SendAsync("UnsubscribeFromLogs", Workerid); // Tilpasset efter behov
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Start SignalR-forbindelsen, hvis den ikke allerede er startet
        Console.WriteLine("----------------------------WorkerLogSubscription initialized.");
        await SignalRService.StartConnectionAsync();
    }
    
    protected override bool ShouldRender()
    {
        // Logik til kun at rerender, når nødvendigt
        // Du kan implementere checks her for at afgøre, om komponenten faktisk skal opdateres
        return IsSubscribed;  // Returner true kun hvis der er en ændring, der kræver rerendering
    }
}

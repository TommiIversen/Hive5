@using System.Collections.Concurrent
@using Common.Models
@using Microsoft.AspNetCore.SignalR.Client
@using StreamHub.Services
@inject BlazorSignalRService SignalRService

<!-- Subscription/Unsubscription Button -->
<button @onclick="ToggleSubscription">
    @(_isSubscribed ? "Unsubscribe" : "Subscribe")
</button>

@if (LogMessages.Any())
{
    int? previousSequenceNumber = null; // Holder styr på det sidste sekvensnummer
    <ul>
        @foreach (var logMessage in LogMessages)
        {
            var currentSequenceNumber = logMessage.LogSequenceNumber;
            bool isOutOfSequence = previousSequenceNumber.HasValue && (currentSequenceNumber != previousSequenceNumber + 1);

            <li style="@(isOutOfSequence ? "background-color: red;" : "")">
                <div>@logMessage.Message</div>
                <div>@logMessage.LogSequenceNumber</div>
            </li>
            previousSequenceNumber = currentSequenceNumber;
        }
    </ul>
}
else
{
    <p>Ingen logbeskeder.</p>
}

@code {
    [Parameter]
    public ConcurrentQueue<LogEntry> LogMessages { get; set; } = new();
    [Parameter]
    public string Workerid { get; set; } = "";

    private bool _isSubscribed = false;

    // Toggle Subscription Logic
    private async Task ToggleSubscription()
    {
        if (_isSubscribed)
        {
            await UnsubscribeFromLogs();
        }
        else
        {
            await SubscribeToLogs();
        }

        _isSubscribed = !_isSubscribed; // Toggle the subscription state
    }

    private async Task SubscribeToLogs()
    {
        if (SignalRService.HubConnection != null)
        {
            await SignalRService.HubConnection.SendAsync("SubscribeToLogs", Workerid); // Tilpasset efter behov
        }
    }

    private async Task UnsubscribeFromLogs()
    {
        if (SignalRService.HubConnection != null)
        {
            await SignalRService.HubConnection.SendAsync("UnsubscribeFromLogs", Workerid); // Tilpasset efter behov
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("----------------------------Init Log komponent.");
        // await SignalRService.StartConnectionAsync();
    }

    protected override bool ShouldRender()
    {
        return _isSubscribed;
    }
}
